---
- name: Configure hostname
  hostname:
    name: "{{ connectbox_default_hostname }}"

- name: Add hosts entry
  blockinfile:
    dest: /etc/hosts
    block: |
      127.0.0.1 {{ connectbox_default_hostname }}

- name: Configure hostname
  hostname:
    name: "{{ connectbox_default_hostname }}"

- name: Add hosts entry
  blockinfile:
    dest: /etc/hosts
    block: |
      127.0.0.1 {{ connectbox_default_hostname }}

- name: Create connectbox group
  group:
    name: _connectbox
    system: yes

# Not strictly necessary but can be used for testing
- name: Create _connectbox user and to _connectbox group
  user:
    name: _connectbox
    group: _connectbox
    system: yes
    createhome: no

# TODO confirm this works as expected
- name: Add www-data to _connectbox group
  user:
    name: www-data
    groups: _connectbox
    append: yes

- name: Make scripts directory
  file:
    state: directory
    path: /usr/local/connectbox/bin
    owner: _connectbox
    group: _connectbox
    recurse: yes
    mode: 0755

- name: Make etc directory
  file:
    state: directory
    path: /usr/local/connectbox/etc
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Make logs directory
  file:
    state: directory
    path: "{{ connectbox_log_dir }}"
    owner: _connectbox
    group: _connectbox
    recurse: yes
    mode: 0755

- name: Copy connectbox scripts
  copy:
    src: ../scripts/
    dest: /usr/local/connectbox/bin/
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Copy connectbox basic auth credentials
  copy:
    content: "{{ connectbox_admin_credentials }}"
    dest: /usr/local/connectbox/etc/basicauth
    owner: _connectbox
    group: _connectbox
    mode: 0660

- name: allow connectbox group to execute connectbox scripts
  blockinfile:
    dest: /etc/sudoers
    validate: /usr/sbin/visudo --check --file="%s"
    block: |
      %_connectbox ALL=(ALL) NOPASSWD: /usr/local/connectbox/bin/
  notify: reload PHP

- name: install access_log_analyzer
  git:
    repo: '{{access_log_analyzer_repo}}'
    dest: /usr/local/access_log_analyzer

- name: Make access_log_analyzer etc directory
  file:
    state: directory
    path: /usr/local/access_log_analyzer/etc
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Make access_log_analyzer var directory
  file:
    state: directory
    path: /usr/local/access_log_analyzer/var
    owner: _connectbox
    group: _connectbox
    mode: 0755

- name: Make access_log_analyzer config overrides
  template:
    src: access_log_analyzer.conf.j2
    dest: /usr/local/access_log_analyzer/etc/access_log_analyzer.conf
    backup: yes
    owner: _connectbox
    group: _connectbox
    mode: 0644

- name: Make hourly logrotate config
  template:
    src: logrotate.hourly.conf.j2
    dest: /usr/local/access_log_analyzer/etc/logrotate.hourly.conf
    backup: yes
    owner: _connectbox
    group: _connectbox
    mode: 0644

- name: Configure hourly logrotate for connectbox access logrotate
  copy:
    content: "/usr/sbin/logrotate /usr/local/access_log_analyzer/etc/logrotate.hourly.conf"
    dest: "/etc/cron.hourly/logrotate.hourly"

# If the system is updated before any iptables modules are loaded
#  the system can't find the modules and iptables rules can't be
#  loaded first time. (A repeat ansible run seems to fix it, though).
# Let's avoid a first-time failure by doing the upgrade after the
#  iptables rules have been updated.
# Consistent with: https://serverfault.com/questions/593263/iptables-nat-does-not-exist
- name: Update existing packages
  apt:
    upgrade: safe
  tags:
  - full-build-only

- name: Make sure /boot/ssh does not exist on Raspbian so sshd isn't re-enabled on boot
  file:
    path: /boot/ssh
    state: absent
  when: not developer_mode and ansible_lsb["id"] == "Raspbian"

# Disable the main user account unless as password hash is provided
- name: Schedule disabling of user account
  set_fact:
    final_command: "/usr/sbin/usermod --lock --shell /usr/sbin/nologin {{ ansible_user }}"
  when: not developer_mode

# sshd forks child processes to handle connections, so stopping and disabling
#  sshd doesn't disconnect the session that's actually doing the stopping and
#  disabling (or the control session if pipelining is in use) so we stop sshd
#  before any potential commands to disable user accounts
- name: Schedule disabling of sshd
  set_fact:
    final_command: "{{ (final_command == '') | ternary('systemctl disable ssh && systemctl stop ssh', ['systemctl disable ssh && systemctl stop ssh', final_command] | join(' && ')) }}"
  when: not developer_mode

# Run the final commands in a handler so any disabling is performed right at
#  the end of the playbook run, to extent that we can influence it. While
#  handlers are run in the order that they are defined within a role, it's
#  unclear how handlers are ordered when multiple roles fire handlers.
#
# This is a no-op force the handler to run (assuming the conditional passes)
- name: Schedule task to do final disabling
  assert:
    that:
      - True
  when: final_command != ""
  changed_when: True
  notify: Run final disabling commands
