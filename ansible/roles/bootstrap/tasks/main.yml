---
# Check early on to see if the style of interface names need to be changed
#  (only applicable to Ubuntu, and not when we're running virtualised)
# We do this before the check for the Armbian reboot oracle. If we need
#  to reboot to activate the old-style interface names, we'll sort out the
#  reboot oracle too, but if the reboot oracle check is before this check
#  we'll need to reboot a second time (after creating the symlink)
- name: setup use of old-style interface names for predictability across devices
  file:
    dest: /etc/udev/rules.d/80-net-setup-link.rules
    src: /dev/null
    state: link
  when: ansible_distribution == "Ubuntu" and ansible_virtualization_type == "NA"
  register: old_style_names

- name: Request reboot if interface naming style has changed
  set_fact:
    reboot_required: True
  when: old_style_names.changed
  tags: skip_ansible_lint

# Check early on to see whether the OS needs to be
# rebooted to allow a disk expansion step to complete.
# This is Armbian only, but the check doesn't hurt others.
- name: Check for resize2fs reboot oracle
  stat:
    path: "/var/run/resize2fs-reboot"
  register: resize2fs_reboot

# If the oracle above exists then we shouldn't continue
- name: Fail when disk expansion is incomplete
  set_fact:
    reboot_required: True
  when: resize2fs_reboot.stat.exists == True

- name: Reboot device for changes to take effect
  shell: sleep 2 && /sbin/shutdown -r now
  async: 1
  poll: 0
  when: reboot_required

# The system takes 5-10 seconds to disappear from the network
#  so let's wait 15 seconds before doing our first check
- name: Wait for server to restart (max wait 5 minutes)
  wait_for_connection:
    delay=15
    timeout=300
  when: reboot_required

# Disable automated apt-y things before attempting to install packages
# unattended-upgrades and apt.systemd.daily only run on Ubuntu
- name: Stop automated apty services
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ apty_services }}"

# Needed for package upgrades via ansible (aptitude safe-upgrade)
- name: Install aptitude
  apt:
    name: aptitude
    state: present

# mikegleasonjr.firewall assumes iptables but Armbian doesn't ship with it
- name: Install iptables
  apt:
    name: iptables
    state: present
  when: connectbox_os == "armbian"

# Only repopulate daily so we don't slow runs down unnecessarily
- name: Populate apt cache
  apt:
    update-cache: yes
    cache_valid_time: 86400 # 1 day

# We build our own armbian images, so we need to prevent upstream
#  kernel, dtb and uboot packages from being installed (lest they
#  overwrite our changes)
# This task will bomb if we're running on a sunxi device and using
#  something other than the "next" branch or using something other
#  than xenial
- name: Pin kernel and dtb packages
  command: "apt-mark hold {{ item }}"
  when: connectbox_os == "armbian" and "sunxi" in ansible_kernel
  register: packageheld
  changed_when: packageheld.stdout.find("already set on hold") == -1
  with_items:
    - linux-dtb-next-sunxi
    - linux-image-next-sunxi
    - linux-u-boot-nanopineo-next
    - linux-xenial-root-next-nanopineo

- name: Temporarily shutdown log2ram service on Armbian during package installation
  service:
    name: log2ram
    state: stopped
  when: connectbox_os == "armbian"
  notify: Start log2ram service

# Needed by Debian Stretch
- name: Install openresolv
  apt:
    name: openresolv
    state: present
  when: ansible_lsb["id"] == "Debian"

# Needed in several subsequent roles
- name: Install packages for python virtualenv
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - python-virtualenv
    - python-pip
    - virtualenv
  tags:
    - captive_portal

# Needed in several subsequent roles
- name: install git
  apt:
    name: git
    state: present

# See if we need to create a wlan0 interface when we're running in a sim
#  environment i.e. running virtualised
- name: Create a wlan0 interface
  command: /sbin/ip link add wlan0 type dummy
  when: "'wlan0' not in ansible_interfaces and ansible_virtualization_type != 'NA'"

# Non developer mode restricts ssh connections to ethernet
# This variable needs to be set before the mikegleasonjr.firewall role is run
- name: Set acceptable interfaces for inbound ssh
  set_fact:
    iptables_ssh_in_interface: "-i eth0"
  when: not developer_mode
