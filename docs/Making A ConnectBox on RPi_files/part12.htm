<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>This step will boot up the target machine (NEO or RPi) with the uSD inserted. We will then make edits to the target machine environment to enable login as user “root” via ssh without password (ie, Keys).</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part11.htm">&lt; Previous</a><span> | </span><a href="../Making%20A%20ConnectBox%20on%20RPi.html">Contents</a><span> | </span><a href="part13.htm">Next &gt;</a></p><p class="s18" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">This step will boot up the target machine (NEO or RPi) with the uSD inserted. We will then make edits to the target machine environment to enable login as user “root” via ssh without password (ie, Keys).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.4:</span><span class="p"> Put microSD into the target machine (NEO or RPi), and use an IP cable to connect the target machine into your network then power up the target machine.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.5:</span><span class="p"> Find the IP of the target machine… I used the iPhone app Scany… you are looking for a used IP that comes and goes as you power the target machine up and down… use whatever tool you are familiar with.</span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">In the following instructions, substitute the IP you found for the target in place of <span style=" color: #B51700;">10.0.0.118</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">(Note: In the following step, you may need to edit the file “/home/vagrant/.ssh/ known_hosts” to remove the credentials from a device earlier assigned the IP now used by your target machine. If you get an error announcing a problem related to that, simply edit the file “known_hosts” (the error message will give you the path) to remove the line beginning with the IP address that the target machine is now using. If there is just one line, remove it.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><span class="s12" style=" background-color: #88FA4E;">Step N3.6:</span><span class="p"> Using the terminal window, connect to the NEO by typing:</span></p><p style="padding-left: 11pt;text-indent: 0pt;text-align: justify;">~$ <a href="mailto:root@10.0.0.118" style=" color: #B51700; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;" target="_blank">ssh </a><a href="mailto:oot@10.0.0.118" class="s19" target="_blank">root@10.0.0.118</a></p><p style="padding-left: 5pt;text-indent: 30pt;text-align: justify;">(use password <span style=" color: #B51700;">1234 </span>and follow prompts to create new pw “<span style=" color: #B51700;">connectbox</span>”). After entering the new password twice, type <span style=" color: #B51700;">Ctrl-c </span>which will close the dialog and exit the NEO.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;"><span class="s12" style=" background-color: #88FA4E;">Step R3.6):</span><span class="p"> Using the terminal window, connect to the RPi by typing:</span></p><p style="padding-left: 11pt;text-indent: 0pt;text-align: justify;">~$ <a href="mailto:pi@10.0.0.118" style=" color: #B51700; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;" target="_blank">ssh </a><a href="mailto:pi@10.0.0.118" class="s19" target="_blank">pi@10.0.0.118</a></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 30pt;text-align: left;">(answer “yes” to the dialog re: logging into a new machine and then use password “<span style=" color: #B51700;">raspberry</span>”)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Once we are logged in as user “pi”, we need to enable the “root” account on the RPi machine. So type the following commands:</p><p class="s20" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">~# <span style=" color: #B51700;">sudo passwd root</span></p><p class="s20" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">(follow prompts to give root the password “<span style=" color: #B51700;">connectbox</span>&quot;)</p><p class="s20" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">~# <span style=" color: #B51700;">sudo echo &#39;PermitRootLogin yes&#39; &gt;&gt; /etc/ssh/sshd_config</span></p><p class="s20" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">~# <span style=" color: #B51700;">sudo service ssh restart </span>// Don’t forget this!</p><p class="s20" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">~# <span style=" color: #B51700;">exit</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 12pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.7:</span><span class="p"> Display and copy the public key set up in Step 2.6:</span></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;">~$ <span class="s8">cat .ssh/id_rsa.pub</span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">COPY the contents of this file by highlighting the text and doing Cmd-C (this text is the public key we need to put in the authorized_keys file on the target machine).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.8: </span><span class="p">Now we will log into the target machine, create the authorized_keys file and paste the public key into that file:</span></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;">~$ <a href="mailto:root@10.0.0.118" style=" color: #B51700; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;" target="_blank">ssh </a><a href="mailto:oot@10.0.0.118" class="s19" target="_blank">root@10.0.0.118</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">(password is still “connectbox”)</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;">~# <span class="s8">mkdir .ssh</span></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;">~# <span class="s8">cd .ssh</span></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;">~# <span class="s8">touch authorized_keys</span></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;">~# <span class="s8">chmod 600 authorized_keys</span></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;">~# <span class="s8">echo ‘&lt;copied_text&gt;’ &gt;&gt; authorized_keys</span></p><p style="padding-left: 5pt;text-indent: 36pt;text-align: left;">to paste your ssh public key into the file “authorized_keys”. Note: Paste the required text into the command line in place of <span class="s8">&lt;copied_text&gt; </span>for the above command. And DON’T forget the single quote characters just before and after the pasted text.</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;">~# <span class="s8">exit                </span>(exit out of the target machine)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.9:</span><span class="p"> Make sure you can do a PW-less login to to the target machine as user “root”:</span></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;">~$ <a href="mailto:root@10.0.0.118" style=" color: #B51700; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt;" target="_blank">ssh </a><a href="mailto:oot@10.0.0.118" class="s19" target="_blank">root@10.0.0.118</a></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;">This login should happen WITHOUT the target machine asking for a password</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;">~# <span class="s8">exit                </span><i>(</i>exit out of the target machine)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.10:</span><span class="p"> Connect a wifi hub antenna to a USB connector on the target machine. (The build will fail if it doesn’t find a USB wifi dongle.) Lots of oﬀerings on Amazon. Here is one possibility:</span></p><p class="s15" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">https://www.amazon.com/Adapter-600Mbps-802-11ac-Wireless-Compatible/dp/<span class="p"> </span>B086WDF6VF/ref=sr_1_15?<span class="p"> </span>dchild=1&amp;keywords=usb+wifi+dongle&amp;qid=1589402526&amp;sr=8-15</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.11:</span><span class="p"> Determine if you want to do a &quot;step by step&quot; build (creating a local image that, if desired, can be published to GitHub at a later time) or a fully automated build</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">which, once started, will require only minimal intervention and result in a published build on the GitHub repository. <b>Note that the fully automated build process requires write permissions to the GitHub ConnectBox repository</b>. If you do not have write privileges to that repository, or if you just want to build a ConnectBox image for local use, continue to Step 3.12. If you want to do a fully automated build with writes to the GitHub ConnectBox repository, go to Step 3.13.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.12</span><span class="s21" style=" background-color: #88FA4E;">:</span><span class="s20"> </span><span class="p">Starting the &quot;step by step&quot; build. From the terminal window run:</span></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;">~$ <span class="s8">cd /home/vagrant</span></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;">~$ <span style=" color: #B51700;">/vagrant/make_cb.py</span></p><p style="padding-left: 41pt;text-indent: -26pt;text-align: left;">Typical script queries and your responses: Update ansible [y/N]: <span class="s8">&lt;CR&gt;</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tag for release [v20200508]: <span class="s8">&lt;CR&gt;</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">IP of build device: <span class="s8">10.0.0.118       </span>(or whatever IP you found)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">After about 50 minutes of activity the script prints something like:</p><p class="s22" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">PLAY RECAP</p><p class="s22" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">10.0.0.118 : ok=134 changed=106 unreachable=0 failed=0</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">If the build to the uSD has succeeded, the PLAY RECAP (above) will show “failed=0”.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">This completes the creation of an uSD card containing the ConnectBox software for your target machine. At this point you can now power down the target machine and remove the uSD card. If you want to create a software image (*.img file) which can be used to create other uSD cards with this same image, proceed to Section 6, &quot;Shrinking The Image&quot;. Otherwise you can just put this uSD chip into your target machine and power up to use you ConnectBox.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 11pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.13:</span><span class="p"> Fully automated build build process.</span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">The automated build process for a published github image uses the github v3 API to tag repositories, so you need to create a <span style=" color: #0366D6;">Github API personal access token</span><span style=" color: #24292E;">. </span>(See: <u>https://help.github.com/en/github/authenticating-to-github/creating-a-personal-</u> <u>access-token-for-the-command-line</u>.) The token only needs the <i>public_repo </i>scope (and should only be given that scope, to reduce the scope for damage if it is lost). Save this token in a text file. We will use this token in the automated script build (next).</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">NOTE: You will only need to do this the very first time you do a fully automated build. You can use this same key on all future fully automated builds.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.14:</span><span class="p"> Starting the fully automated build. From within the terminal window run:</span></p><p style="padding-left: 15pt;text-indent: 0pt;text-align: left;">~$ <span class="s8">cd /home/vagrant</span></p><p style="padding-left: 5pt;text-indent: 10pt;text-align: left;">~$ <span class="s8">CONNECTBOX_GITHUB_TOKEN=&lt;your-GitHub-rep-token&gt; python3 /vagrant/ prepare_release.py</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">(Copy the text of the token you created in Step 3.13 and paste it in in place of <span style=" color: #B51700;">&lt;your- GitHub-rep-token&gt; </span>in the command line above.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: -36pt;text-align: left;">Typical script queries and your responses: GitHub token [..]: <span class="s8">&lt;CR&gt;</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tag for release [v20200508]: <span class="s8">&lt;CR&gt;</span></p><p style="padding-left: 109pt;text-indent: -68pt;text-align: left;">IP of build device: <span class="s8">10.0.0.118                                      </span>(or whatever IP you found) Press any key: <span class="s8">&lt;CR&gt;                               </span>(this takes a few minutes…)</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Proceed with new tag ‘v20200508’? [y/N]: <span class="s8">y</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">After about 50 minutes of activity the script prints something like:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">PLAY RECAP</p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">10.0.0.118 : ok=134 changed=106 unreachable=0 failed=0 Insert SD card from device (you may need to attach it to this VM)</p><p class="s22" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">If the build to the uSD has succeeded, the PLAY RECAP (above) will show “failed=0”. Continue to Step 3.15.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.15:</span><span class="p"> Power down the target machine and remove the microSD card. This uSD card now contains a ConnectBox image suitable for running in your target machine. In the next section of the automated build, the Mac will shrink the image which is on the uSD card and from that, create and store an image file (*.img) suitable for creating other uSD cards with that same image.</span></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Put the uSD card into a <b>microSD to USB </b>adapter. (<b>IMPORTANT</b>: a microSD to SD card adaptor WILL NOT WORK. <b>You MUST use a USB type adaptor</b>.) Plug the USB adaptor into the computer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.16:</span><span class="p"> Once the USB adapter stick is mounted in the Mac and recognized by vagrant, the terminal will print the message, “</span><span class="s20">Additional partition(s) detected</span><span class="p">” and ask for a key press. Press a key and the build of the shrink process will begin.</span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">(Note: If the build succeed through Step 3.14 but has problems at this point or beyond, you can still use the &quot;step by step&quot; instructions to create the *.img file from you uSD card, and if desired, publish your image to GitHub. See Section 6, &quot;Shrinking The Image&quot;.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.17: </span><span class="p">After about 30 more minutes…The script in the terminal next will print the message, “</span><span class="s20">Compressed image complete and located at: …</span><span class="p">”.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">An upoad to GitHub follows (about 10 minutes) and then a final message, “<i>Now, update release notes, inserting changelog and base image name</i>”. You can now remove your uSD from the Mac. The automated image creation process is complete.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">At this point your Mac will have a compressed image file of your uSD suitable for use by Etcher (or other image burning tools) for creating duplicates of your uSD card. This image file is available both locally and on GitHub. The local file will be in your <span style=" color: #B51700;">&lt;YHD&gt;/ connectbox-tools-master/deployment </span>directory and will end in <span style=" color: #B51700;">.img.xz</span>. The ending</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">messages in the terminal will tell you the exact name of the image.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.18:</span><span class="p"> Update release notes in GitHub by opening </span><span class="s15">https://github.com/ConnectBox/</span><span class="p"> </span><span class="s15">connectbox-pi</span><span class="p">, the click on the “releases” tab, click the “Edit” button next to the release you just made, add notes as to what was changed or added (see earlier releases for examples), and click “Save draft” at the bottom to save the release notes.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span class="s12" style=" background-color: #88FA4E;">Step 3.19:</span><span class="p"> When you have verified the img works as expected and want to make it available to the public, open GitHub and go again to the page for editing your release. At the bottom you will find a “Publish” button. Click that button to take your build from the “Draft” mode into “Pre-release” mode where it will be available to the public.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Note that the path to your release is available by opening your release page on GitHub and copying the address in the address box at the top of your browser. For my v20200121 build, that address is:</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">https://github.com/ConnectBox/connectbox-pi/releases/tag/v20200121</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part11.htm">&lt; Previous</a><span> | </span><a href="../Making%20A%20ConnectBox%20on%20RPi.html">Contents</a><span> | </span><a href="part13.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
